plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

version = (hasProperty("CIRevision") ? CIRevision : project.mod_version)
group = group_name

base {
    archivesName = "${project.mod_id}-${project.minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

minecraft {
    // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName "Minecraft_Client_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--username', secrets.getProperty("username")?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid")?: ''
        }

        server {
            taskName "Minecraft_Server_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            taskName "Minecraft_GameTestServer_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            taskName "Minecraft_Data_${project.minecraft_version}"
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'Jared\'s Maven' // JEI
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'tterrag\'s Maven' // CTM
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'theillusivec4\'s Maven' // Curios
        url 'https://maven.theillusivec4.top/'
    }
    maven {
        name 'Tama\'s Maven' // Cross-Dim Commands
        url "https://maven.tamaized.com/releases"
    }
    maven {
        name 'Curseforge Maven' // Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // jared
    implementation fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")

    // tterrag
    //runtimeOnly fg.deobf("team.chisel.ctm:CTM:${project.minecraft_version}-${project.ctm_version}")

    // theillusivec4
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}+${project.minecraft_version}")

    //curse maven
    implementation fg.deobf("curse.maven:jade-324717:4681833")
    runtimeOnly fg.deobf("curse.maven:jeed-532286:4599236")
    runtimeOnly fg.deobf("curse.maven:museum-curator-859070:4629894")

    compileOnly fg.deobf("curse.maven:the-one-probe-245211:4629624")

    //mods we dont have compat with but are nice to have
    runtimeOnly fg.deobf("team-twilight:crossdimcommands:${project.base_minecraft_version}-1.0")

    //minecraft
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.neo_version}"
}

tasks.named('jar', Jar).configure {
    manifest {
        archiveClassifier = 'universal'
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "TeamTwilight",
                'Specification-Version'   : "1",
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "TeamTwilight",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'teamtwilight'
            setArtifactId project.mod_id
        }
    }
    repositories {
        maven {
            //url "file:///${project.projectDir}/mcmodsrepo"
            url "https://modmaven.dev:443/artifactory/local-releases"
            credentials {
                username System.getenv('ARTIFACTORY_USER')
                password System.getenv('ARTIFACTORY_PASS')
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
